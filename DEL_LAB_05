{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fab53d2f-6f9a-4cbd-ad97-a1401dd4ab60",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
      "\u001b[1m26421880/26421880\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
      "\u001b[1m5148/5148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
      "\u001b[1m4422102/4422102\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n",
      "Training on clean subset...\n",
      "Epoch 1/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\keras\\src\\layers\\reshaping\\flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.4980 - loss: 1.6276   \n",
      "Epoch 2/5\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7080 - loss: 0.9450 \n",
      "Epoch 3/5\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7580 - loss: 0.7647 \n",
      "Epoch 4/5\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7710 - loss: 0.6790 \n",
      "Epoch 5/5\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7960 - loss: 0.6099 \n",
      "Clean test accuracy: 75.00%\n",
      "Generating adversarial examples with epsilon=0.1 ...\n",
      "Retraining model with clean + adversarial examples...\n",
      "Epoch 1/5\n",
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5235 - loss: 1.4930\n",
      "Epoch 2/5\n",
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6520 - loss: 1.0126\n",
      "Epoch 3/5\n",
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7365 - loss: 0.7893\n",
      "Epoch 4/5\n",
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8030 - loss: 0.6368\n",
      "Epoch 5/5\n",
      "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8465 - loss: 0.5149\n",
      "After adversarial training - clean test accuracy: 79.00%\n",
      "After adversarial training - adversarial test accuracy: 9.00%\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done. If you want: (1) try different epsilon, (2) use stronger model, (3) visualize perturbations.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.datasets import fashion_mnist\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()\n",
    "\n",
    "subset_size = 1000\n",
    "x_train = x_train[:subset_size].astype(\"float32\") / 255.0\n",
    "y_train = y_train[:subset_size]\n",
    "x_test = x_test[:200].astype(\"float32\") / 255.0\n",
    "y_test = y_test[:200]\n",
    "\n",
    "\n",
    "def create_model():\n",
    "    model = Sequential([\n",
    "        Flatten(input_shape=(28, 28)),\n",
    "        Dense(64, activation='relu'),\n",
    "        Dense(10, activation='softmax')\n",
    "    ])\n",
    "    model.compile(optimizer='adam',\n",
    "                  loss='sparse_categorical_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "\n",
    "def generate_adversarial_examples(model, x, y, epsilon=0.1):\n",
    "   p\n",
    "    x_tensor = tf.convert_to_tensor(x, dtype=tf.float32)\n",
    "    y_tensor = tf.convert_to_tensor(y, dtype=tf.int64)\n",
    "\n",
    "    with tf.GradientTape() as tape:\n",
    "        tape.watch(x_tensor)\n",
    "        preds = model(x_tensor)  # shape (batch, n_classes)\n",
    "        loss_per_example = tf.keras.losses.sparse_categorical_crossentropy(y_tensor, preds)\n",
    "        loss = tf.reduce_mean(loss_per_example)  # scalar\n",
    "\n",
    "    gradient = tape.gradient(loss, x_tensor)  # shape (batch, 28,28)\n",
    "    signed_grad = tf.sign(gradient)\n",
    "    adv_x = x_tensor + epsilon * signed_grad\n",
    "    adv_x = tf.clip_by_value(adv_x, 0.0, 1.0)\n",
    "    return adv_x.numpy()\n",
    "\n",
    "\n",
    "model = create_model()\n",
    "print(\"Training on clean subset...\")\n",
    "model.fit(x_train, y_train, epochs=5, batch_size=64, verbose=1)\n",
    "\n",
    "\n",
    "loss, acc = model.evaluate(x_test, y_test, verbose=0)\n",
    "print(f\"Clean test accuracy: {acc * 100:.2f}%\")\n",
    "\n",
    "\n",
    "epsilon = 0.1\n",
    "print(f\"Generating adversarial examples with epsilon={epsilon} ...\")\n",
    "adv_x_train = generate_adversarial_examples(model, x_train, y_train, epsilon=epsilon)\n",
    "\n",
    "\n",
    "x_train_combined = np.concatenate([x_train, adv_x_train], axis=0)\n",
    "y_train_combined = np.concatenate([y_train, y_train], axis=0)\n",
    "\n",
    "print(\"Retraining model with clean + adversarial examples...\")\n",
    "model.fit(x_train_combined, y_train_combined, epochs=5, batch_size=64, verbose=1)\n",
    "\n",
    "\n",
    "loss_clean, acc_clean = model.evaluate(x_test, y_test, verbose=0)\n",
    "adv_x_test = generate_adversarial_examples(model, x_test, y_test, epsilon=epsilon)\n",
    "loss_adv, acc_adv = model.evaluate(adv_x_test, y_test, verbose=0)\n",
    "\n",
    "print(f\"After adversarial training - clean test accuracy: {acc_clean * 100:.2f}%\")\n",
    "print(f\"After adversarial training - adversarial test accuracy: {acc_adv * 100:.2f}%\")\n",
    "\n",
    "\n",
    "def show_clean_vs_adversarial(clean_images, adv_images, labels, preds_before=None, preds_after=None, n=6):\n",
    "    \"\"\"\n",
    "    Display n examples of clean vs adv images side-by-side.\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=(10, 4))\n",
    "    for i in range(n):\n",
    "        # Clean\n",
    "        plt.subplot(2, n, i+1)\n",
    "        plt.imshow(clean_images[i], cmap='gray')\n",
    "        plt.axis('off')\n",
    "        title = f\"Label: {labels[i]}\"\n",
    "        if preds_before is not None:\n",
    "            title += f\"\\nPredB:{preds_before[i]}\"\n",
    "        if preds_after is not None:\n",
    "            title += f\" PredA:{preds_after[i]}\"\n",
    "        plt.title(title, fontsize=8)\n",
    "\n",
    "        # Adversarial\n",
    "        plt.subplot(2, n, n + i + 1)\n",
    "        plt.imshow(adv_images[i], cmap='gray')\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "preds_after = np.argmax(model.predict(x_test[:6]), axis=1)\n",
    "preds_after_adv = np.argmax(model.predict(adv_x_test[:6]), axis=1)\n",
    "\n",
    "show_clean_vs_adversarial(x_test[:6], adv_x_test[:6], y_test[:6],\n",
    "                          preds_before=None, preds_after=preds_after)\n",
    "\n",
    "\n",
    "print(\"Done. If you want: (1) try different epsilon, (2) use stronger model, (3) visualize perturbations.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f7c8dac-1c15-4d3e-adef-4e66ae53c234",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
